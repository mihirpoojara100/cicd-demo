name: CI/CD - Test, Build, Deploy

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev

env:
  IMAGE_NAME: mihirpoojara1310/cicd-demo # üëà change to your Docker Hub repo if different
  IMAGE_TAG: latest

jobs:
  # -----------------------
  # 1Ô∏è‚É£ TEST JOB - Run Python Tests
  # -----------------------
  test:
    name: Run Python Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run Tests
        run: pytest -q

  # -----------------------
  # 2Ô∏è‚É£ BUILD & PUSH JOB - Docker Hub
  # -----------------------
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test # üëà runs only if tests succeed

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Image to Docker Hub
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

  # -----------------------
  # 3Ô∏è‚É£ DEPLOY JOB - SSH to EC2
  # -----------------------
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build-and-push # üëà only runs after Docker image is pushed

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Deploy via SSH to EC2
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "üî∏ Pulling latest image..."
            docker pull ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

            echo "üî∏ Stopping old container..."
            docker stop cicd-demo || true
            docker rm cicd-demo || true

            echo "üî∏ Starting new container..."
            docker run -d -p 80:80 --name cicd-demo ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

            echo "‚úÖ Deployment completed successfully."
